env:
  RUBY_VERSION: 2.7.1
  RAILS_ENV: test
  DB_HOST: 127.0.0.1
  DB_USER: root
  DB_PASSWORD: msql_strong_password
  DB_NAME: oriai_relatedly_test
  COVERAGE: true

name: Relatedly Workflow
on:
  push:
    branches:
      - develop
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  rubocop-test:
    name: Rubocop
    runs-on: ubuntu-latest
    steps:
      - name: Action Checkout v2
        uses: actions/checkout@v2
      - name: Ruby Setup
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
      - name: Action Cache v2
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-
      - name: Configure & Update Bundler
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
      - name: Check code
        run: bundle exec rubocop
  rspec-test:
    name: RSpec
    needs: rubocop-test
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: msql_strong_password
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      redis:
        image: redis
        ports: ['6379:6379']
        options: --entrypoint redis-server
    steps:
      - uses: actions/checkout@v1
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
      - uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-
      - name: Install dependencies
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
      - name: Copy database yml
        run: |
          mv ./config/database.circleci.yml ./config/database.yml
      - name: Create database
        env:
          DB_PORT: ${{ job.services.mysql.ports[3306] }}
        run: |
          bundle exec rake db:create db:migrate
      - name: Run tests
        env:
          DB_PORT: ${{ job.services.mysql.ports[3306] }}
        run: |
          bundle exec rspec
      - name: Upload coverage results
        uses: actions/upload-artifact@master
        if: always()
        with:
          name: coverage-report
          path: coverage
  # cypress-test:
  #   name: Cypress
  #   needs: rubocop-test
  #   runs-on: ubuntu-latest
  #   services:
  #     mysql:
  #       image: mysql:5.7
  #       env:
  #         MYSQL_ROOT_PASSWORD: msql_strong_password
  #       ports:
  #         - 3306
  #       options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
  #   steps:
  #     - uses: actions/checkout@v1
  #     - uses: actions/setup-ruby@v1
  #       with:
  #         ruby-version: ${{ env.RUBY_VERSION }}
  #     - uses: actions/cache@v1
  #       with:
  #         path: vendor/bundle
  #         key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-gems-
  #     - name: Install dependencies
  #       run: |
  #         bundle config path vendor/bundle
  #         bundle install --jobs 4 --retry 3
  #     - name: Setup Node
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: 12.18.2
  #     - name: Copy database yml
  #       run: |
  #         mv ./config/database.circleci.yml ./config/database.yml
  #     - name: Create database
  #       env:
  #         DB_PORT: ${{ job.services.mysql.ports[3306] }}
  #       run: |
  #         bundle exec rake db:create db:migrate
  #     - name: Run rails server in background
  #       env:
  #         DB_PORT: ${{ job.services.mysql.ports[3306] }}
  #       run: bundle exec rails server -e test -p 5017 &
  #     - name: Wait for server
  #       run: |
  #         until $(curl --retry 10 --output /dev/null --silent --head --fail http://127.0.0.1:5017/admin); do
  #           printf '.'
  #           sleep 5
  #         done
  #     - name: Executes Cypress end-to-end tests
  #       env:
  #         DB_PORT: ${{ job.services.mysql.ports[3306] }}
  #       run: |
  #         bin/rails assets:precompile
  #         yarn cypress run --project ./spec --config video=false
  #     - name: Upload cypress screenshots
  #       uses: actions/upload-artifact@master
  #       if: failure()
  #       with:
  #         name: cypress-screenshots
  #         path: spec/cypress/screenshots
  # deploy:
  #   name: Deploy to Heroku
  #   needs: ["rspec-test", "cypress-test"]
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/develop'
  #   steps:
  #   - uses: actions/checkout@v1
  #   - name: Copy database.yml
  #     run: mv ./config/database.yml.sample ./config/database.yml

  #   - name: Login To GitHub Registry
  #     run: echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u ${{ secrets.GIT_USER_NAME }} --password-stdin

  #   - name: Pull Image from Github Registry
  #     run: docker pull docker.pkg.github.com/$GITHUB_REPOSITORY/techbrain || true

  #   - name: Build Docker Image
  #     run: |
  #       docker build \
  #       --build-arg PRE_COMPILE=true \
  #       --build-arg RAILS_ENV=production \
  #       --build-arg SECRET_KEY_BASE=${{ secrets.SECRET_KEY_BASE }} \
  #       --build-arg AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }} \
  #       --build-arg AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }} \
  #       --build-arg AWS_BUCKET=${{ secrets.AWS_BUCKET }} \
  #       --build-arg AWS_BUCKET_URL=${{ secrets.AWS_BUCKET_URL }} \
  #       --build-arg DATABASE_URL=${{ secrets.DATABASE_URL }} \
  #       --build-arg BONSAI_URL=${{ secrets.BONSAI_URL }} \
  #       --build-arg GITHUB_REPO_NAME=${{ secrets.GITHUB_REPO_NAME }} \
  #       --build-arg GITHUB_REPO_OWNER=${{ secrets.GITHUB_REPO_OWNER }} \
  #       --build-arg GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \
  #       --build-arg JDOODLE_CLIENT_ID=${{ secrets.JDOODLE_CLIENT_ID }} \
  #       --build-arg JDOODLE_CLIENT_SECRET=${{ secrets.JDOODLE_CLIENT_SECRET }} \
  #       --build-arg LANG=${{ secrets.LANG }} \
  #       --build-arg PAPERTRAIL_API_TOKEN=${{ secrets.PAPERTRAIL_API_TOKEN }} \
  #       --build-arg RAILS_LOG_TO_STDOUT=${{ secrets.RAILS_LOG_TO_STDOUT }} \
  #       --build-arg REDIS_URL=${{ secrets.REDIS_URL }} \
  #       --build-arg SENDGRID_PASSWORD=${{ secrets.SENDGRID_PASSWORD }} \
  #       --build-arg SENDGRID_USERNAME=${{ secrets.SENDGRID_USERNAME }} \
  #       --build-arg STAGING_HOST=${{ secrets.STAGING_HOST }} \
  #       --build-arg TZ=${{ secrets.TZ }} \
  #       --cache-from=docker.pkg.github.com/$GITHUB_REPOSITORY/techbrain \
  #       -f docker/Dockerfile.prod \
  #       -t docker.pkg.github.com/$GITHUB_REPOSITORY/techbrain .

  #   - name: Push To Git Registry
  #     run: docker push docker.pkg.github.com/$GITHUB_REPOSITORY/techbrain

  #   - name: Login to Heroku Registry
  #     run: echo ${{ secrets.HEROKU_API_KEY }} | docker login registry.heroku.com -u ${{ secrets.HEROKU_LOGIN }} --password-stdin 

  #   - name: Push Docker Image to Heroku Registry
  #     run: |
  #       docker tag docker.pkg.github.com/$GITHUB_REPOSITORY/techbrain registry.heroku.com/${{secrets.HEROKU_APP_NAME}}/web
  #       docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web


    # - name: Release App
    #   run: |
    #     echo machine api.heroku.com >> ~/.netrc
    #     echo "  login ${{ secrets.HEROKU_LOGIN }}" >> ~/.netrc 
    #     echo "  password ${{ secrets.HEROKU_API_KEY }}" >> ~/.netrc 
    #     heroku container:release web --app ${{ secrets.HEROKU_APP_NAME }}
    #     heroku run rake db:migrate --app ${{ secrets.HEROKU_APP_NAME }}
